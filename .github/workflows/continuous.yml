name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux / macOS
  ####################

  Unix:
    name: ${{ matrix.name }} (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest]
        config: [Debug, Release]
        include:
          - os: macos-latest
            name: macOS
          - os: ubuntu-18.04
            name: Linux
          - os: ubuntu-20.04
            name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            sudo apt-get install \
            ccache \
            libboost-all-dev \
            xorg-dev \
            libglu1-mesa-dev

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install ccache boost

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.config }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=1.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DRIGID_IPC_WITH_UNIT_TESTS=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cd build; make -j2; ccache --show-stats

      - name: Tests
        run: cd build; ctest --verbose

  ####################
  # Windows
  ####################

  Windows:
    runs-on: windows-latest
    env:
      CC: cl.exe
      CXX: cl.exe
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
    steps:
      - name: Download and install Boost
        uses: MarkusJx/install-boost@v1.0.1
        id: install-boost
        with:
          boost_version: 1.73.0
          boost_install_dir: D:\a\

      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10
      - uses: seanmiddleditch/gha-setup-ninja@master

        # https://github.com/actions/cache/issues/101
      - name: Set env
        run: |
          echo "appdata=$env:LOCALAPPDATA" >> ${env:GITHUB_ENV}
          echo "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}" >> ${env:GITHUB_ENV}

      - name: Cache build
        id: cache-build
        uses: actions/cache@v1
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-cache

      - name: Prepare sccache
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install sccache --global
          # Scoop modifies the PATH so we make it available for the next steps of the job
          echo "${env:PATH}" >> ${env:GITHUB_PATH}

        # We run configure + build in the same step, since they both need to call VsDevCmd
        # Also, cmd uses ^ to break commands into multiple lines (in powershell this is `)
      - name: Configure and build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake --version
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -DRIGID_IPC_WITH_UNIT_TESTS=ON ^
            -DBOOST_ROOT="${{ steps.install-boost.outputs.BOOST_ROOT }}" ^
            -DBoost_INCLUDE_DIR="D:/a/boost/${{ steps.install-boost.outputs.BOOST_VER }}/include" ^
            -B build ^
            -S .
          ninja -j1

      - name: Tests
        run: cd build; ctest --verbose
