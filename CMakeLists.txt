cmake_minimum_required(VERSION 3.8)
project(FixingCollisions)

################################################################################

# libigl-options
option(LIBIGL_USE_STATIC_LIBRARY     "Use libigl as static library" OFF)
option(LIBIGL_WITH_OPENGL            "Use OpenGL"                    ON)
option(LIBIGL_WITH_OPENGL_GLFW       "Use GLFW"                      ON)
option(LIBIGL_WITH_OPENGL_GLFW_IMGUI "Use IMGUI"                     ON)
option(LIBIGL_WITH_PNG               "Use PNG"                       ON)
option(LIBIGL_WITH_PREDICATES        "Use exact predicates"          ON)

# project-options
option(FIXING_COLLISIONS_BUILD_UNIT_TESTS         "Build unit-tests"      ON)
option(FIXING_COLLISIONS_ENABLE_DERIVATIVE_CHECK  "Check Derivatives"    OFF)
option(FIXING_COLLISIONS_ENABLE_PROFILING         "Profile Functions"    OFF)
option(FIXING_COLLISIONS_BUILD_COMPARISONS        "Build comparisons"     ON)
option(FIXING_COLLISIONS_CODE_COVERAGE            "Builds targets with code coverage instrumentation. (Requires GCC or Clang)" OFF)
option(FIXING_COLLISIONS_ENABLE_MOSEK             "Enable Mosek Library" OFF)
mark_as_advanced(FIXING_COLLISIONS_ENABLE_MOSEK)

# PolySolve settings
set(POLYSOLVE_WITH_AMGCL OFF CACHE BOOL "Use AMGCL" FORCE)

################################################################################

### Configuration
set(FIXING_COLLISIONS_EXTERNAL "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(Autogen)
include(Warnings)
include(UseColors)
include(${PROJECT_NAME}Dependencies)

################################################################################
# Fixing Collisions Library
################################################################################

add_library(${PROJECT_NAME}
    src/autodiff/autodiff.cpp
    ${FIXING_COLLISIONS_EXTERNAL}/finite-diff/finitediff.cpp

    src/utils/sinc.cpp

    src/ccd/impact.cpp
    src/ccd/collision_candidate.cpp
    src/ccd/hash_grid.cpp
    src/ccd/collision_detection_narrow_phase.cpp
    src/ccd/collision_detection_broad_phase.cpp

    src/ccd/interval_root_finder.cpp
    src/ccd/rigid_body_time_of_impact.cpp
    src/ccd/rigid_body_hash_grid.cpp
    src/ccd/rigid_body_collision_detection_narrow_phase.cpp
    src/ccd/rigid_body_collision_detection_broad_phase.cpp

    src/geometry/intersection.cpp

    src/io/serialize_json.cpp
    src/io/read_rb_scene.cpp
    src/io/read_obj.cpp

    src/physics/mass.cpp
    src/physics/rigid_body_problem.cpp
    src/physics/rigid_body.cpp
    src/physics/rigid_body_assembler.cpp

    src/barrier/barrier.cpp
    src/barrier/barrier_chorner.cpp

    src/opt/distance_barrier_constraint.cpp
    src/opt/collision_constraint.cpp
    src/opt/optimization_problem.cpp
    src/opt/optimization_results.cpp
    # src/opt/volume_constraint.cpp

    src/problems/barrier_problem.cpp

    src/solvers/homotopy_solver.cpp
    src/solvers/fischer_newton.cpp
    src/solvers/lcp_solver.cpp
    src/solvers/ncp_solver.cpp
    src/solvers/line_search.cpp
    src/solvers/newton_solver.cpp
    src/solvers/ipc_solver.cpp
    src/solvers/solver_factory.cpp

    src/problems/distance_barrier_rb_problem.cpp
    src/problems/split_distance_barrier_rb_problem.cpp
    # src/problems/volume_rb_problem.cpp
    src/problems/problem_factory.cpp

    src/time_stepper/sympletic_euler_time_stepper.cpp
    src/time_stepper/verlet_time_stepper.cpp
    src/time_stepper/exponential_euler_time_stepper.cpp
    src/time_stepper/dmv_time_stepper.cpp
    src/time_stepper/time_stepper_factory.cpp

    src/utils/tensor.cpp
    src/utils/eigen_ext.cpp
    src/utils/regular_2d_grid.cpp

    src/SimState.cpp
    src/logger.cpp
    src/profiler.cpp

    # Generated files
    src/autogen/time_of_impact_coeff.tpp
    src/autogen/collision_volume.tpp

)

target_include_directories(${PROJECT_NAME} PUBLIC src)

# Autogenerated files ----------------------------------------------------------
project_autogen(${PROJECT_NAME} time_of_impact_coeff.py time_of_impact_coeff.tpp auto_time_of_impact_coeff .ipp)
project_autogen(${PROJECT_NAME} collision_volume.py collision_volume.tpp auto_collision_volume .ipp)
#target_sources(${PROJECT_NAME} PRIVATE
#    src/autogen/auto_collision_volume.cpp
#    src/autogen/auto_time_of_impact_coeff.cpp
#)

################################################################################
# Optional Definitions
################################################################################

# Directory paths
set(OPT_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/figures/data")
target_compile_definitions(${PROJECT_NAME} PUBLIC -DOPT_OUTPUT_DIR=\"${OPT_OUTPUT_DIR}\")

set(FIXTURES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fixtures)
target_compile_definitions(${PROJECT_NAME} PUBLIC -DFIXTURES_DIR=\"${FIXTURES_DIR}\")

set(DATA_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/data")
target_compile_definitions(${PROJECT_NAME} PUBLIC -DDATA_OUTPUT_DIR=\"${DATA_OUTPUT_DIR}\")

set(LOGS_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/logs")
target_compile_definitions(${PROJECT_NAME} PUBLIC -DLOGS_OUTPUT_DIR=\"${LOGS_OUTPUT_DIR}\")

if(FIXING_COLLISIONS_ENABLE_DERIVATIVE_CHECK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DWITH_DERIVATIVE_CHECK)
endif()

if(FIXING_COLLISIONS_ENABLE_PROFILING)
    message(STATUS "Profiling Enabled")
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DPROFILE_FUNCTIONS)
endif()

################################################################################
# Required Libraries
################################################################################

# libigl
target_link_libraries(${PROJECT_NAME} PUBLIC
  igl::core igl::opengl igl::opengl_glfw igl::opengl_glfw_imgui igl::png
  igl::predicates)

# Extra warnings
target_link_libraries(${PROJECT_NAME} PRIVATE warnings::all)

# Json Parser
target_link_libraries(${PROJECT_NAME} PUBLIC nlohmann_json::nlohmann_json)

# Logger
target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog)

# Finite Differences
# target_link_libraries(${PROJECT_NAME} PUBLIC FiniteDiff::FiniteDiff)
target_include_directories(${PROJECT_NAME} PUBLIC ${FIXING_COLLISIONS_EXTERNAL}/finite-diff)

# GMP
#find_package(GMP)
#if(NOT ${GMP_FOUND})
#        MESSAGE(FATAL_ERROR "Cannot find GMP")
#endif()
#target_include_directories(${PROJECT_NAME} PUBLIC ${GMP_INCLUDE_DIRS})
#target_link_libraries(${PROJECT_NAME} PUBLIC ${GMP_LIBRARIES})
#

# Mosek
if(FIXING_COLLISIONS_ENABLE_MOSEK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DBUILD_WITH_MOSEK)
    target_link_libraries(${PROJECT_NAME} PUBLIC mosek::mosek)
endif()

# Boost
set(Boost_USE_MULTITHREADED TRUE)
find_package(Boost COMPONENTS filesystem REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost Boost::filesystem)

# TBB
target_link_libraries(${PROJECT_NAME} PUBLIC TBB::tbb)

# Etienne Vouga's CTCD Library for the floating point root finding algorithm
target_link_libraries(${PROJECT_NAME} PUBLIC EVCTCD)

# Teseo's Exact CCD library for exact segment-triangle intersection check
target_link_libraries(${PROJECT_NAME} PUBLIC RationalCCD)

# PolySolve for wrapping linear solvers
target_link_libraries(${PROJECT_NAME} PUBLIC polysolve)

# tinyxml2
target_link_libraries(${PROJECT_NAME} PUBLIC tinyxml2::tinyxml2)

################################################################################
# Compiler options
################################################################################

# ## SIMD support
# # Figure out SSE level support
# message(STATUS "Seaching for SSE...")
# find_package(SSE)
# # Apple broke AVX instructions with clang:
# # https://gitlab.com/libeigen/eigen/-/commit/71aa53dd6dfdc497324d9e87f59c4ba820191856
# if(NOT APPLE)
#   # Figure out AVX level support
#   message(STATUS "Searching for AVX...")
#   find_package(AVX)
#   # Figure out FMA level support
#   message(STATUS "Searching for FMA...")
#   find_package(FMA)
# else()
#   message(WARNING "Disabling AVX support: clang compiler shipped with XCode 11.[012] generates broken assembly with -macosx-version-min=10.15 and AVX enabled.")
# endif()
# # Add SSE, AVX, and FMA flags to compiler flags
# string(REPLACE " " ";" SIMD_FLAGS "${SSE_FLAGS} ${AVX_FLAGS} ${FMA_FLAGS}")
# target_compile_options(${PROJECT_NAME} PUBLIC ${SIMD_FLAGS})

# Use C++14
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_14)

################################################################################
# Simulations Executable
################################################################################

add_executable(${PROJECT_NAME}_sim
    src/viewer/imgui_ext.cpp
    src/viewer/igl_viewer_ext.cpp
    src/viewer/UISimState.cpp
    src/viewer/UIMenu.cpp

    src/main.cpp
)

target_include_directories(${PROJECT_NAME}_sim PRIVATE src)
target_link_libraries(${PROJECT_NAME}_sim PUBLIC ${PROJECT_NAME})

# Charlie Tangora's gif-h library
target_link_libraries(${PROJECT_NAME}_sim PRIVATE gif_h::gif_h)

################################################################################
# No UI Executable
################################################################################
add_executable(${PROJECT_NAME}_ngui
     src/cli_main.cpp
)

target_include_directories(${PROJECT_NAME}_ngui PRIVATE src)
target_link_libraries(${PROJECT_NAME}_ngui PUBLIC ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME}_ngui PUBLIC CLI11::CLI11)

################################################################################
# MinDistance Executable
################################################################################
add_executable(cli_mindistance
     src/cli_min_distance.cpp
)

target_include_directories(cli_mindistance PRIVATE src)
target_link_libraries(cli_mindistance PUBLIC ${PROJECT_NAME})
target_link_libraries(cli_mindistance PUBLIC CLI11::CLI11)

################################################################################
# CCD Check
################################################################################
add_executable(cli_ccd
     src/cli_ccd.cpp
)

target_include_directories(cli_ccd PRIVATE src)
target_link_libraries(cli_ccd PUBLIC ${PROJECT_NAME})
target_link_libraries(cli_ccd PUBLIC CLI11::CLI11)

################################################################################
# Tests
################################################################################

if(FIXING_COLLISIONS_CODE_COVERAGE)
    message(STATUS "Building with code coverage")
    include(CodeCoverage)
    add_code_coverage_all_targets()

    target_code_coverage(${PROJECT_NAME})
#    target_code_coverage(${PROJECT_NAME}_bin)
    target_code_coverage(${PROJECT_NAME}_sim)
    target_code_coverage(${PROJECT_NAME}_ngui)
endif()

if(FIXING_COLLISIONS_BUILD_UNIT_TESTS)
    # Catch2
    if(NOT TARGET Catch2::Catch2)
        fixing_collisions_download_catch2()
        add_subdirectory(${FIXING_COLLISIONS_EXTERNAL}/Catch2 catch2)
        list(APPEND CMAKE_MODULE_PATH ${FIXING_COLLISIONS_EXTERNAL}/Catch2/contrib)
    endif()

    include(CTest)
    enable_testing()
    add_subdirectory(tests)
endif()

################################################################################
# Comparisons to other methods
################################################################################
if(FIXING_COLLISIONS_BUILD_COMPARISONS)
    add_subdirectory(comparisons)
endif()
