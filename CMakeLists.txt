cmake_minimum_required(VERSION 3.1)
project(FixingCollisions)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
################################################################################

set(THIRD_PARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/3rd_party/)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
list(APPEND CMAKE_MODULE_PATH ${THIRD_PARTY_DIR}/Catch2/contrib)

include(Autogen)
include(Warnings)
include(${PROJECT_NAME}Dependencies)

################################################################################
# libigl-options
option(LIBIGL_WITH_OPENGL               "Use OpenGL"         ON)
option(LIBIGL_WITH_OPENGL_GLFW          "Use GLFW"           ON)
option(LIBIGL_WITH_OPENGL_GLFW_IMGUI    "Use IMGUI"          ON)

# project-options
option(BUILD_UNIT_TESTS                 "Build unit-tests"   ON)

################################################################################
# Fixing Collisions Library
################################################################################
set(SRCFILES
    src/not_implemented_error.cpp
    src/degenerate_edge_error.cpp
    src/impact.cpp
    src/collision_detection.cpp
    src/prune_impacts.cpp
    src/collision_volume.cpp

    src/autodiff/finitediff.cpp
    src/autodiff/autodiff.cpp)

set(TMPFILES
     src/autogen/collision_volume.tpp)

add_library(${PROJECT_NAME} ${SRCFILES} ${TMPFILES})
target_include_directories(${PROJECT_NAME} PUBLIC include src)

# Autogenerated files ---------------------------------------------------------
project_autogen(${PROJECT_NAME} collision_volume.py collision_volume.tpp auto_collision_volume)
project_autogen(${PROJECT_NAME} test_function.py test_function.tpp auto_test_function)
set(AUTOGEN
    src/autogen/auto_collision_volume.cpp
    src/autogen/auto_test_function.cpp)
target_sources(${PROJECT_NAME} PUBLIC ${AUTOGEN})

################################################################################
# Fixing Collisions Executable
################################################################################
set(VIEWER_FILES
    src/read_scene.cpp
    src/write_scene.cpp
    src/main.cpp
    src/state.cpp
    src/viewer.cpp
    src/viewer_menu.cpp)

add_executable(${PROJECT_NAME}_bin ${VIEWER_FILES})
target_include_directories(${PROJECT_NAME}_bin PRIVATE src)
target_link_libraries(${PROJECT_NAME}_bin ${PROJECT_NAME})

# Fixtures folder ---------------------------------------------------------
add_custom_command(TARGET ${PROJECT_NAME}_bin POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/fixtures
        $<TARGET_FILE_DIR:${PROJECT_NAME}_bin>/fixtures)


################################################################################
# Required Libraries
################################################################################
# libigl
find_package(LIBIGL REQUIRED QUIET)
target_link_libraries(${PROJECT_NAME} PUBLIC igl::core igl::opengl igl::opengl_glfw igl::opengl_glfw_imgui)

# Extra warnings
target_link_libraries(${PROJECT_NAME} PRIVATE warnings::all)

# Json Parser
add_library(json INTERFACE)
target_include_directories(json SYSTEM INTERFACE ${THIRD_PARTY_DIR}/json/include)
target_link_libraries(${PROJECT_NAME}_bin json)


################################################################################
# Tests
################################################################################
if(BUILD_UNIT_TESTS)
    # catch - for testing
    download_catch2()
    add_library(catch INTERFACE)
    target_include_directories(catch SYSTEM INTERFACE ${THIRD_PARTY_DIR}/Catch2/single_include/catch2)


    include(CTest)
    enable_testing()
    add_subdirectory(tests)
endif()
