cmake_minimum_required(VERSION 3.8)
project(RigidIPC)

################################################################################

# project-options
option(RIGID_IPC_WITH_UNIT_TESTS       "Build unit-tests"       ON)
option(RIGID_IPC_WITH_CODE_COVERAGE    "Builds targets with code coverage instrumentation (Requires GCC or Clang)" OFF)
option(RIGID_IPC_WITH_DERIVATIVE_CHECK "Check derivatives"     OFF)
option(RIGID_IPC_WITH_PROFILING        "Profile functions"     OFF)
option(RIGID_IPC_WITH_COMPARISONS      "Build comparisons"     OFF)
option(RIGID_IPC_WITH_SIMD             "Enable SIMD"           OFF)
option(RIGID_IPC_WITH_OPENGL           "Build GUI"              ON)
option(RIGID_IPC_WITH_TOOLS            "Build tools"            ON)
option(RIGID_IPC_WITH_PYTHON           "Build Python bindings" OFF)

# libigl-options
option(LIBIGL_USE_STATIC_LIBRARY     "Use libigl as static library" OFF)
option(LIBIGL_WITH_OPENGL            "Use OpenGL"                    ON)
option(LIBIGL_WITH_OPENGL_GLFW       "Use GLFW"                      ON)
option(LIBIGL_WITH_OPENGL_GLFW_IMGUI "Use IMGUI"                     ON)
option(LIBIGL_WITH_PNG               "Use PNG"                       ON)
option(LIBIGL_WITH_PREDICATES        "Use exact predicates"          ON)

set(LIBIGL_WITH_OPENGL_GLFW_IMGUI ${RIGID_IPC_WITH_OPENGL} CACHE BOOL "" FORCE)
set(LIBIGL_WITH_OPENGL_GLFW ${RIGID_IPC_WITH_OPENGL} CACHE BOOL "" FORCE)
set(LIBIGL_WITH_OPENGL ${RIGID_IPC_WITH_OPENGL} CACHE BOOL "" FORCE)
set(LIBIGL_WITH_PNG ${RIGID_IPC_WITH_OPENGL} CACHE BOOL "" FORCE)

# PolySolve settings
option(POLYSOLVE_WITH_CHOLMOD          "Enable Cholmod library"            ON)
option(POLYSOLVE_WITH_UMFPACK          "Enable UmfPack library"            OFF)
option(POLYSOLVE_WITH_SUPERLU          "Enable SuperLU library"            OFF)
option(POLYSOLVE_WITH_MKL              "Enable MKL library"                OFF)
option(POLYSOLVE_WITH_PARDISO          "Enable Pardiso library"            OFF)
option(POLYSOLVE_WITH_HYPRE            "Enable hypre"                      OFF)
option(POLYSOLVE_WITH_AMGCL            "Use AMGCL"                         OFF)
option(POLYSOLVE_WITH_SPECTRA          "Enable computing spectrum"         OFF)

################################################################################

### Configuration
set(RIGID_IPC_EXTERNAL "${CMAKE_CURRENT_SOURCE_DIR}/3rdparty")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(Autogen)
include(Warnings)
include(UseColors)
include(${PROJECT_NAME}Dependencies)
mark_as_advanced(CLEAR CMAKE_BUILD_TYPE)

################################################################################
# Rigid IPC Library
################################################################################

add_library(${PROJECT_NAME}
  src/autodiff/autodiff.cpp
  ${RIGID_IPC_EXTERNAL}/finite-diff/finitediff.cpp

  src/utils/sinc.cpp

  src/ccd/impact.cpp
  src/ccd/ccd.cpp
  src/ccd/linear/broad_phase.cpp
  src/ccd/piecewise_linear/time_of_impact.cpp
  src/interval/filib_rounding.cpp
  src/interval/interval_root_finder.cpp
  src/ccd/rigid/broad_phase.cpp
  src/ccd/rigid/rigid_body_hash_grid.cpp
  src/ccd/rigid/rigid_body_bvh.cpp
  src/ccd/rigid/time_of_impact.cpp
  src/ccd/rigid/rigid_trajectory_aabb.cpp
  src/ccd/redon/time_of_impact.cpp
  src/ccd/save_queries.cpp

  src/geometry/intersection.cpp

  src/io/serialize_json.cpp
  src/io/read_rb_scene.cpp
  src/io/read_obj.cpp
  src/io/write_obj.cpp
  src/io/write_gltf.cpp

  src/physics/mass.cpp
  src/utils/mesh_selector.cpp
  src/physics/rigid_body.cpp
  src/physics/rigid_body_assembler.cpp
  src/physics/rigid_body_problem.cpp

  src/barrier/barrier.cpp
  src/barrier/barrier_chorner.cpp

  src/opt/distance_barrier_constraint.cpp
  src/opt/collision_constraint.cpp
  src/opt/optimization_problem.cpp
  src/opt/optimization_results.cpp

  src/problems/barrier_problem.cpp

  src/solvers/newton_solver.cpp
  src/solvers/ipc_solver.cpp
  src/solvers/homotopy_solver.cpp
  src/solvers/solver_factory.cpp
  # src/solvers/line_search.cpp

  src/problems/rigid_body_collision_constraint.cpp
  src/problems/distance_barrier_rb_problem.cpp
  src/problems/split_distance_barrier_rb_problem.cpp
  src/problems/problem_factory.cpp

  src/time_stepper/sympletic_euler_time_stepper.cpp
  src/time_stepper/verlet_time_stepper.cpp
  src/time_stepper/exponential_euler_time_stepper.cpp
  src/time_stepper/dmv_time_stepper.cpp
  src/time_stepper/time_stepper_factory.cpp

  src/utils/tensor.cpp
  src/utils/eigen_ext.cpp
  src/utils/regular_2d_grid.cpp
  src/utils/get_rss.cpp

  src/SimState.cpp
  src/logger.cpp
  src/profiler.cpp
)

target_include_directories(${PROJECT_NAME} PUBLIC src)

# Autogenerated files ----------------------------------------------------------
# project_autogen(${PROJECT_NAME} time_of_impact_coeff.py time_of_impact_coeff.tpp auto_time_of_impact_coeff .ipp)


################################################################################
# Optional Definitions
################################################################################

# Directory paths
set(RIGID_IPC_MESH_DIR ${CMAKE_CURRENT_SOURCE_DIR}/meshes)
target_compile_definitions(${PROJECT_NAME} PUBLIC -DRIGID_IPC_MESHES_DIR=\"${RIGID_IPC_MESH_DIR}\")

if(RIGID_IPC_WITH_DERIVATIVE_CHECK)
  target_compile_definitions(${PROJECT_NAME} PUBLIC -DRIGID_IPC_WITH_DERIVATIVE_CHECK)
endif()

if(RIGID_IPC_WITH_PROFILING)
  message(STATUS "Profiling Enabled")
  target_compile_definitions(${PROJECT_NAME} PUBLIC -DRIGID_IPC_PROFILE_FUNCTIONS)
endif()

################################################################################
# Required Libraries
################################################################################

# libigl
target_link_libraries(${PROJECT_NAME} PUBLIC igl::core igl::predicates)

# Extra warnings
target_link_libraries(${PROJECT_NAME} PRIVATE warnings::all)

# JSON Parser
target_link_libraries(${PROJECT_NAME} PUBLIC nlohmann::json)

# Logger
target_link_libraries(${PROJECT_NAME} PUBLIC spdlog::spdlog)

# Finite Differences
# target_link_libraries(${PROJECT_NAME} PUBLIC FiniteDiff::FiniteDiff)
target_include_directories(${PROJECT_NAME} PUBLIC ${RIGID_IPC_EXTERNAL}/finite-diff)

# GMP
#find_package(GMP)
#if(NOT ${GMP_FOUND})
#        MESSAGE(FATAL_ERROR "Cannot find GMP")
#endif()
#target_include_directories(${PROJECT_NAME} PUBLIC ${GMP_INCLUDE_DIRS})
#target_link_libraries(${PROJECT_NAME} PUBLIC ${GMP_LIBRARIES})
#

# Boost
set(Boost_USE_MULTITHREADED TRUE)
find_package(Boost REQUIRED)
target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost)

# TBB
target_link_libraries(${PROJECT_NAME} PUBLIC TBB::tbb)

# MSCCD
target_link_libraries(${PROJECT_NAME} PUBLIC TightInclusion)

# PolySolve for wrapping linear solvers
target_link_libraries(${PROJECT_NAME} PUBLIC PolyFEM::polysolve)

# IPC Toolkit
target_link_libraries(${PROJECT_NAME} PUBLIC ipc::toolkit)

# filib
target_link_libraries(${PROJECT_NAME} PUBLIC filib::filib)

# SimpleBVH
target_link_libraries(${PROJECT_NAME} PUBLIC SimpleBVH::BVH_lib)

# tinygltf
target_link_libraries(${PROJECT_NAME} PUBLIC tinygltf::tinygltf)

# Filesystem
target_link_libraries(${PROJECT_NAME} PUBLIC ghc::filesystem)

################################################################################
# Compiler options
################################################################################

## SIMD support
if(RIGID_IPC_WITH_SIMD)
  # Figure out SSE level support
  message(STATUS "Seaching for SSE...")
  find_package(SSE)
  # Apple broke AVX instructions with clang:
  # https://gitlab.com/libeigen/eigen/-/commit/71aa53dd6dfdc497324d9e87f59c4ba820191856
  if(NOT APPLE)
    # Figure out AVX level support
    message(STATUS "Searching for AVX...")
    find_package(AVX)
    # Figure out FMA level support
    message(STATUS "Searching for FMA...")
    find_package(FMA)
  else()
    message(WARNING "Disabling AVX support: clang compiler shipped with XCode 11.[012] generates broken assembly with -macosx-version-min=10.15 and AVX enabled.")
  endif()
  # Add SSE, AVX, and FMA flags to compiler flags
  string(REPLACE " " ";" SIMD_FLAGS "${SSE_FLAGS} ${AVX_FLAGS} ${FMA_FLAGS}")
  target_compile_options(${PROJECT_NAME} PUBLIC ${SIMD_FLAGS})
endif()

# Use C++17
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17)

################################################################################
# Simulations Executable
################################################################################

if(RIGID_IPC_WITH_OPENGL)
  add_executable(${PROJECT_NAME}_sim
    src/main.cpp

    src/viewer/imgui_ext.cpp
    src/viewer/igl_viewer_ext.cpp
    src/viewer/UISimState.cpp
    src/viewer/UIMenu.cpp
  )
  target_include_directories(${PROJECT_NAME}_sim PUBLIC src)

  target_link_libraries(${PROJECT_NAME}_sim PUBLIC ${PROJECT_NAME})

  target_link_libraries(${PROJECT_NAME}_sim PUBLIC
    igl::opengl igl::opengl_glfw igl::opengl_glfw_imgui igl::png)

  # Charlie Tangora's gif-h library
  target_link_libraries(${PROJECT_NAME}_sim PRIVATE gif_h::gif_h)

  target_link_libraries(${PROJECT_NAME}_sim PUBLIC CLI11::CLI11)
endif()

################################################################################
# No UI Executable
################################################################################
add_executable(${PROJECT_NAME}_ngui
  src/cli_main.cpp
)

target_link_libraries(${PROJECT_NAME}_ngui PUBLIC ${PROJECT_NAME})
target_link_libraries(${PROJECT_NAME}_ngui PUBLIC CLI11::CLI11)

################################################################################
# Tools
################################################################################
if(RIGID_IPC_WITH_TOOLS)
  add_subdirectory(src/tools)
endif()

################################################################################
# Tests
################################################################################

if(RIGID_IPC_CODE_COVERAGE)
  message(STATUS "Building with code coverage")
  include(CodeCoverage)
  add_code_coverage_all_targets()

  target_code_coverage(${PROJECT_NAME})
  target_code_coverage(${PROJECT_NAME}_sim)
  target_code_coverage(${PROJECT_NAME}_ngui)
endif()

if(RIGID_IPC_WITH_UNIT_TESTS)
  include(CTest)
  enable_testing()
  add_subdirectory(tests)
endif()

################################################################################
# Comparisons to other methods
################################################################################
if(RIGID_IPC_WITH_COMPARISONS)
  add_subdirectory(comparisons)
endif()

################################################################################
# Python bindings
################################################################################

if(RIGID_IPC_WITH_PYTHON)
  add_subdirectory(python)
endif()
